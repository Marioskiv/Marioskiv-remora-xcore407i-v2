# ============================================================================
# XCORE407I Remora Ethernet - 3-Axis CNC HAL Configuration
# ============================================================================
#
# Hardware Pin Mapping (defined in firmware config_3axis_basic.json):
#
# AXIS X (Joint 0):
#   Stepgen:  PE3=Enable, PE4=Step, PE5=Direction
#   Encoder:  PD0=Channel A, PD1=Channel B
#   Endstop:  PA0 (NC switch with pullup)
#   Alarm:    PC0 (Data Bit 8)
#
# AXIS Y (Joint 1):
#   Stepgen:  PE6=Enable, PE0=Step, PE1=Direction
#   Encoder:  PD2=Channel A, PD3=Channel B
#   Endstop:  PA1 (NC switch with pullup)
#   Alarm:    PC1 (Data Bit 9)
#
# AXIS Z (Joint 2):
#   Stepgen:  PB9=Enable, PB4=Step, PB5=Direction
#   Encoder:  PD4=Channel A, PD5=Channel B
#   Endstop:  PA2 (NC switch with pullup)
#   Alarm:    PC2 (Data Bit 10)
#
# Network: Board IP = 192.168.10.10, PC IP = 192.168.10.1
# ============================================================================

# ============================================================================
# LOAD COMPONENTS
# ============================================================================

# Load Remora Ethernet component (velocity mode for closed-loop)
loadrt remora-eth PRU_base_freq=120000 ctrl_type=v,v,v

# Load PID controllers for closed-loop control (one per axis)
loadrt pid names=pid.x,pid.y,pid.z

# ============================================================================
# THREADS - Add functions to servo thread (1ms / 1kHz)
# Order: read -> motion -> PID -> update-freq -> write
# ============================================================================

addf remora.read             servo-thread
addf motion-command-handler  servo-thread
addf motion-controller       servo-thread
addf pid.x.do-pid-calcs      servo-thread
addf pid.y.do-pid-calcs      servo-thread
addf pid.z.do-pid-calcs      servo-thread
addf remora.update-freq      servo-thread
addf remora.write            servo-thread

# ============================================================================
# E-STOP CHAIN
# ============================================================================

# E-stop loop with Remora status
net user-enable-out      iocontrol.0.user-enable-out      => remora.SPI-enable
net user-request-enable  iocontrol.0.user-request-enable  => remora.SPI-reset
net remora-status        remora.SPI-status                => iocontrol.0.emc-enable-in

# ============================================================================
# AXIS X (Joint 0)
# ============================================================================

# --- Joint parameters ---
setp remora.joint.0.scale      [JOINT_0]SCALE
setp remora.joint.0.maxvel     [JOINT_0]STEPGEN_MAXVEL
setp remora.joint.0.maxaccel   [JOINT_0]STEPGEN_MAXACCEL

# --- Enable signal ---
net j0enable  joint.0.amp-enable-out  =>  remora.joint.0.enable  pid.x.enable

# --- Position command (from LinuxCNC to PID) ---
net j0pos-cmd  joint.0.motor-pos-cmd  =>  pid.x.command

# --- Position feedback (from Remora encoder to LinuxCNC and PID) ---
net j0pos-fb  remora.joint.0.pos-fb  =>  joint.0.motor-pos-fb  pid.x.feedback

# --- Velocity command (from PID to Remora) ---
net j0vel-cmd  pid.x.output  =>  remora.joint.0.vel-cmd

# --- PID tuning ---
setp pid.x.Pgain      [JOINT_0]P
setp pid.x.Igain      [JOINT_0]I
setp pid.x.Dgain      [JOINT_0]D
setp pid.x.FF0        [JOINT_0]FF0
setp pid.x.FF1        [JOINT_0]FF1
setp pid.x.FF2        [JOINT_0]FF2
setp pid.x.bias       [JOINT_0]BIAS
setp pid.x.deadband   [JOINT_0]DEADBAND
setp pid.x.maxoutput  [JOINT_0]MAX_OUTPUT

# --- Home/Limit switches ---
net X-min  remora.input.0  =>  joint.0.home-sw-in  joint.0.neg-lim-sw-in  joint.0.pos-lim-sw-in
# --- Alarm input (active high) ---
net X-alarm  remora.input.3  =>  halui.estop.activate

# ============================================================================
# AXIS Y (Joint 1)
# ============================================================================

# --- Joint parameters ---
setp remora.joint.1.scale      [JOINT_1]SCALE
setp remora.joint.1.maxvel     [JOINT_1]STEPGEN_MAXVEL
setp remora.joint.1.maxaccel   [JOINT_1]STEPGEN_MAXACCEL

# --- Enable signal ---
net j1enable  joint.1.amp-enable-out  =>  remora.joint.1.enable  pid.y.enable

# --- Position command ---
net j1pos-cmd  joint.1.motor-pos-cmd  =>  pid.y.command

# --- Position feedback ---
net j1pos-fb  remora.joint.1.pos-fb  =>  joint.1.motor-pos-fb  pid.y.feedback

# --- Velocity command ---
net j1vel-cmd  pid.y.output  =>  remora.joint.1.vel-cmd

# --- PID tuning ---
setp pid.y.Pgain      [JOINT_1]P
setp pid.y.Igain      [JOINT_1]I
setp pid.y.Dgain      [JOINT_1]D
setp pid.y.FF0        [JOINT_1]FF0
setp pid.y.FF1        [JOINT_1]FF1
setp pid.y.FF2        [JOINT_1]FF2
setp pid.y.bias       [JOINT_1]BIAS
setp pid.y.deadband   [JOINT_1]DEADBAND
setp pid.y.maxoutput  [JOINT_1]MAX_OUTPUT

# --- Home/Limit switches ---
net Y-min  remora.input.1  =>  joint.1.home-sw-in  joint.1.neg-lim-sw-in  joint.1.pos-lim-sw-in
# --- Alarm input (active high) ---
net Y-alarm  remora.input.4  =>  halui.estop.activate

# ============================================================================
# AXIS Z (Joint 2)
# ============================================================================

# --- Joint parameters ---
setp remora.joint.2.scale      [JOINT_2]SCALE
setp remora.joint.2.maxvel     [JOINT_2]STEPGEN_MAXVEL
setp remora.joint.2.maxaccel   [JOINT_2]STEPGEN_MAXACCEL

# --- Enable signal ---
net j2enable  joint.2.amp-enable-out  =>  remora.joint.2.enable  pid.z.enable

# --- Position command ---
net j2pos-cmd  joint.2.motor-pos-cmd  =>  pid.z.command

# --- Position feedback ---
net j2pos-fb  remora.joint.2.pos-fb  =>  joint.2.motor-pos-fb  pid.z.feedback

# --- Velocity command ---
net j2vel-cmd  pid.z.output  =>  remora.joint.2.vel-cmd

# --- PID tuning ---
setp pid.z.Pgain      [JOINT_2]P
setp pid.z.Igain      [JOINT_2]I
setp pid.z.Dgain      [JOINT_2]D
setp pid.z.FF0        [JOINT_2]FF0
setp pid.z.FF1        [JOINT_2]FF1
setp pid.z.FF2        [JOINT_2]FF2
setp pid.z.bias       [JOINT_2]BIAS
setp pid.z.deadband   [JOINT_2]DEADBAND
setp pid.z.maxoutput  [JOINT_2]MAX_OUTPUT

# --- Home/Limit switches ---
net Z-min  remora.input.2  =>  joint.2.home-sw-in  joint.2.neg-lim-sw-in  joint.2.pos-lim-sw-in
# --- Alarm input (active high) ---
net Z-alarm  remora.input.5  =>  halui.estop.activate

# ============================================================================
# Touch Probe (remora.input.12 â†’ PE14)
# ============================================================================

net probe-in remora.input.12 => motion.probe-input

# ============================================================================
# OPTIONAL: Spindle control (uncomment to enable)
# ============================================================================

# net spindle.on spindle.0.on => remora.SP.0
# net spindle.speed spindle.0.speed-out => remora.SP.0

# ============================================================================
# DEBUG COMMANDS
# ============================================================================

# To see all Remora pins:
#   halcmd show pin remora
#
# To monitor encoder counts:
#   halmeter pin remora.joint.0.count
#
# To monitor position feedback:
#   halmeter pin remora.joint.0.pos-fb
#
# To monitor PID error:
#   halmeter pin pid.x.error
#
# To adjust PID in real-time:
#   halcmd setp pid.x.Pgain 60.0
